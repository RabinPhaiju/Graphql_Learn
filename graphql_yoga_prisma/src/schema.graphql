# Scaler types -> String, Boolean, Int, Float, ID
type Query {
  users(query: String): [User]
  user: User!
  me: User!
  posts(query: String): [Post]
  myPosts(query: String): [Post]
  post(id: ID!): Post!
  comments(query: String): [Comment]
}

type Mutation {
  createUser(data: CreateUserInput!): Authpayload!
  loginUser(data: LoginUserInput!): Authpayload!
  deleteUser: User!
  updateUser(data: UpdateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(id: ID!): Post!
  updatePost(id: ID!, data: UpdatePostInput): Post
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}
input LoginUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  bio: String
  profilePic: String
  password: String
  role: Role
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  postId: ID!
}

input UpdateCommentInput {
  text: String
}

type User {
  id: ID!
  name: String!
  email: String
  createdAt: Int
  updatedAt: Int
  role: Role!
  bio: String
  profilePic: String
  username: String!
  password: String!
  posts: [Post]
  comments: [Comment]
}
type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User
  authorId: ID
  createdAt: Int
  updatedAt: Int
  comments: [Comment]
}
type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post
  createdAt: Int
  updatedAt: Int
}

type Authpayload {
  user: User!
  token: String!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}
enum Role {
  SUPERADMIN
  USER
  ADMIN
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
}
